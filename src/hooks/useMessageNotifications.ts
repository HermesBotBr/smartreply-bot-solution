
import { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { toast } from 'sonner';

interface PackUpdateResponse {
  success: boolean;
  message: string;
  data?: {
    pack_id: string;
    seller_id: string;
    messages_count: number;
    timestamp: string;
  };
  error?: string;
}

/**
 * Hook para gerenciar notifica√ß√µes de novas mensagens 
 * @param sellerId ID do vendedor
 * @param onPackUpdate Fun√ß√£o a ser chamada quando houver atualiza√ß√£o em um pacote
 */
export function useMessageNotifications(
  sellerId: string | null,
  onPackUpdate: (packId: string) => void
) {
  const [isPollingApi, setIsPollingApi] = useState(false);
  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const lastResponseTimestampRef = useRef<string | null>(null);

  useEffect(() => {
    // Quando o componente √© montado ou o sellerId muda
    if (!sellerId) return;

    // Limpa o intervalo anterior se existir
    if (pollingIntervalRef.current) {
      clearInterval(pollingIntervalRef.current);
    }

    // Configura uma verifica√ß√£o para monitorar chamadas ao endpoint /api/force-refresh-pack
    const setupPackUpdateMonitoring = () => {
      console.log("üì° Sistema de monitoramento de atualiza√ß√µes iniciado para seller:", sellerId);
      
      // Configuramos um intervalo para verificar periodicamente se h√° atualiza√ß√µes vindas do endpoint
      pollingIntervalRef.current = setInterval(async () => {
        try {
          setIsPollingApi(true);
          const response = await axios.get('/api/check-update-queue', {
            params: { seller_id: sellerId }
          });
          
          if (response.data.updates && response.data.updates.length > 0) {
            console.log("üì¶ Atualiza√ß√µes detectadas:", response.data.updates);
            
            // Para cada pacote na fila de atualiza√ß√£o, chamamos o callback
            response.data.updates.forEach((update: any) => {
              const packId = update.pack_id;
              console.log(`üì¨ Processando atualiza√ß√£o para o pacote ${packId}`);
              
              // Armazenamos o timestamp da √∫ltima atualiza√ß√£o
              lastResponseTimestampRef.current = update.timestamp;
              
              // Chamamos o callback para atualizar o frontend
              onPackUpdate(packId);
            });
          }
        } catch (error) {
          console.error('‚ö†Ô∏è Erro ao verificar fila de atualiza√ß√µes:', error);
        } finally {
          setIsPollingApi(false);
        }
      }, 3000); // Verifica a cada 3 segundos
    };

    setupPackUpdateMonitoring();
    
    // Cleanup no unmount
    return () => {
      if (pollingIntervalRef.current) {
        clearInterval(pollingIntervalRef.current);
      }
    };
  }, [sellerId, onPackUpdate]);

  // M√©todo exposto para testar for√ßar a atualiza√ß√£o de um pacote espec√≠fico (pode ser usado para testes internos)
  const testForceRefresh = async (packId: string) => {
    if (!sellerId) return false;
    
    try {
      setIsPollingApi(true);
      
      const response = await axios.post('/api/force-refresh-pack', {
        seller_id: sellerId,
        pack_id: packId
      });
      
      if (response.data.success) {
        console.log(`‚úÖ Atualiza√ß√£o for√ßada para o pacote ${packId} conclu√≠da:`, response.data);
        
        // Chamamos onPackUpdate com o packId para atualizar o frontend imediatamente
        onPackUpdate(packId);
        
        // Armazenamos o timestamp da √∫ltima atualiza√ß√£o
        if (response.data.data?.timestamp) {
          lastResponseTimestampRef.current = response.data.data.timestamp;
        }
        
        toast.success(`Mensagens do pacote ${packId} atualizadas com sucesso!`);
        return true;
      } else {
        console.error("‚ùå Erro ao for√ßar atualiza√ß√£o:", response.data.error);
        toast.error(`Erro na atualiza√ß√£o: ${response.data.error}`);
        return false;
      }
    } catch (error) {
      console.error('‚ö†Ô∏è Erro ao testar endpoint de atualiza√ß√£o for√ßada:', error);
      toast.error('Falha na comunica√ß√£o com o servidor');
      return false;
    } finally {
      setIsPollingApi(false);
    }
  };

  return { isPollingApi, testForceRefresh, lastUpdateTimestamp: lastResponseTimestampRef.current };
}
